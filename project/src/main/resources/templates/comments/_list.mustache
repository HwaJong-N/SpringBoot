
<!-- 댓글 띄우기 -->
<div id = "comments-list">
    <!-- commentDto가 여러 개의 데이터라면 자동으로 반복해서 실행됨 -->
    {{#commentDtos}}
        <!-- id에는 commentDto 내의 id가 삽입됨 -->
        <div class = "card m-3" id = "comment-{{id}}">
            <div class="card-header">
                {{nickname}}
                <!-- Button trigger modal -->
                <button type="button"
                        class="btn btn-sm btn-outline-primary"
                        data-bs-toggle="modal"
                        data-bs-target="#comment-edit-modal"
                        data-bs-id="{{id}}"
                        data-bs-nickname="{{nickname}}"
                        data-bs-body="{{body}}"
                        data-bs-article-id="{{articleId}}">수정</button>

                <button type="button"
                        class="btn btn-sm btn-outline-danger comment-delete-btn"
                        data-comment-id="{{id}}">삭제</button>
            </div>
            <div class="card-body">
                {{body}}
            </div>
        </div>
    {{/commentDtos}}
</div>


<!-- Modal -->
<div class="modal fade" id="comment-edit-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">댓글 수정</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- 댓글 수정 폼 -->
                <form>
                    <!-- 닉네임 입력 -->
                    <div class="mb-3">
                        <label class="form-label">닉네임</label>
                        <input type="text" class="form-control form-control-sm" id="edit-comment-nickname">
                    </div>

                    <!-- 댓글 본문 입력 -->
                    <div class="mb-3">
                        <label class="form-label">댓글 내용</label>
                        <textarea type="text" class="form-control form-control-sm" rows="3" id="edit-comment-body"></textarea>
                    </div>

                    <!-- 히든 인풋 -->
                    <input type="hidden" id="edit-comment-id">
                    <input type="hidden" id="edit-comment-article-id">

                    <!-- 전송 버튼 -->
                    <button type="button" class="btn btn-outline-primary btn-sm" id="comment-update-btn">수정 완료</button>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- Modal 이벤트 처리 -->
<script>
// 1. Modal 데이터 띄우기

    // Modal 요소 선택
    const commentEditModal = document.querySelector("#comment-edit-modal");

    // Modal 이벤트 감지
    commentEditModal.addEventListener("show.bs.modal", event => {
        // Trigger btn 선택
        const triggerBtn = event.relatedTarget;

        // (TriggerBtn 내부의) 데이터 가져오기
        const id = triggerBtn.getAttribute("data-bs-id");
        const nickname = triggerBtn.getAttribute("data-bs-nickname");
        const body = triggerBtn.getAttribute("data-bs-body");
        const articleId = triggerBtn.getAttribute("data-bs-article-id");

        // 데이터를 반영 (가져온 데이터를 Modal의 입력폼에 전달되도록)
        document.querySelector("#edit-comment-nickname").value = nickname;
        document.querySelector("#edit-comment-body").value = body;
        document.querySelector("#edit-comment-id").value = id;
        document.querySelector("#edit-comment-article-id").value = articleId;
    })

// 2. 수정된 데이터 처리

    // 수정 완료 버튼
    const commentUpdateBtn = document.querySelector("#comment-update-btn");

    // 클릭 이벤트 감지 및 처리 ( RestAPI 호출 )
    commentUpdateBtn.addEventListener("click", () => {

        // 수정 댓글 객체 생성
        const comment = {
            id: document.querySelector("#edit-comment-id").value,
            nickname: document.querySelector("#edit-comment-nickname").value,
            body: document.querySelector("#edit-comment-body").value,
            article_id: document.querySelector("#edit-comment-article-id").value
        };

        // 수정 Rest API 호출
        const url = "/api/comments/" + comment.id;
        fetch(url, {
            method: "PATCH",
            body: JSON.stringify(comment),
            headers: {
                "Content-Type": "application/json"
            }
        }).then(response => {
            // http 응답 코드에 따른 메세지 출력
            const msg = (response.ok) ? "댓글이 수정되었습니다.": "댓글 수정 실패";
            alert(msg);

            // 현재 페이지 새로고침
            window.location.reload();
        });
    })

</script>

<!-- 댓글 삭제 -->

<script>

    // 삭제 버튼 선택
    const commentDeleteBtns = document.querySelectorAll(".comment-delete-btn");

    // 삭제 버튼 이벤트 처리
    commentDeleteBtns.forEach(btn => {
        // 각 버튼의 이벤트 처리 등록
        btn.addEventListener("click", event => {
            // 이벤트 발생 요소 선택
            const commentDeleteBtn = event.srcElement;

            // 삭제할 댓글 id 가져오기
            const commentId = commentDeleteBtn.getAttribute("data-comment-id");

            // 삭제 API 호출 및 처리
            const url = `/api/comments/${commentId}`;
            fetch(url, {
                method: "DELETE"
            }).then(response => {
               // 댓글 삭제 실패 처리
               if(!response.ok) {
                   alert("댓글 삭제 실패");
                   return;
               }

               // 댓글 삭제 성공 시, 댓글을 화면에서 지움
               else {
                   const target = document.querySelector(`#comment-${commentId}`);
                   target.remove();
               }
            });
        })
    })

</script>